// <auto-generated />
using System;
using Dientes_Sanos_Core_MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dientes_Sanos_Core_MVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210731145928_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dientes_Sanos_Core_MVC.Areas.Paciente.Models.MODELO_COMUNA", b =>
                {
                    b.Property<int>("PROV_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PROV_NOMBRE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PROV_ID");

                    b.ToTable("TBL_PROVINCIA");
                });

            modelBuilder.Entity("Dientes_Sanos_Core_MVC.Areas.Paciente.Models.MODELO_GENERO", b =>
                {
                    b.Property<int>("GENERO_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GENERO_NOMBRE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GENERO_ID");

                    b.ToTable("TBL_GENERO");
                });

            modelBuilder.Entity("Dientes_Sanos_Core_MVC.Areas.Paciente.Models.MODELO_ODONTOLOGO", b =>
                {
                    b.Property<int>("ODONT_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ODONT_APELLIDO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ODONT_CODIGO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ODONT_ESPECIALIDAD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ODONT_ESTADO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ODONT_FEC_ACT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ODONT_FEC_ELA")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ODONT_FEC_NAC")
                        .HasColumnType("datetime2");

                    b.Property<string>("ODONT_ID_TITULO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ODONT_NOMBRE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ODONT_ID");

                    b.ToTable("TBL_ODONTOLOGO");
                });

            modelBuilder.Entity("Dientes_Sanos_Core_MVC.Areas.Paciente.Models.MODELO_PACIENTE", b =>
                {
                    b.Property<int>("PAC_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PAC_APELLIDO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_CODIGO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_COD_ODONT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_COMUNA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_CONVENIO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_CORREO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_DIRECCION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PAC_EDAD")
                        .HasColumnType("int");

                    b.Property<DateTime>("PAC_FECHA_NAC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PAC_FEC_ACT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PAC_FEC_REG")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PAC_IMAGEN")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PAC_NOMBRE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_OBSERVACIONES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_OTRAS_COMUNAS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_PREVISIONES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_REPRESENTANTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_RUT")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PAC_SEXO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAC_TELEFONO")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PAC_ID");

                    b.ToTable("TBL_PACIENTE");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SalesSystem.Areas.Users.Models.MODELO_USUARIO", b =>
                {
                    b.Property<int>("USER_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("USER_APELLIDO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USER_CELULAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USER_EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USER_ID_USER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("USER_IMAGE")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("USER_NOMBRE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USER_PASS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USER_ROL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USER_RUT")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("USER_ID");

                    b.ToTable("TBL_USUARIO");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
